'use client';

import { motion } from 'framer-motion';
import { useState } from 'react';

interface FAQItem {
  id: string;
  question: string;
  answer: string;
  category: string;
}

const faqData: FAQItem[] = [
  {
    id: '1',
    question: 'What is an Ambigram?',
    answer: 'An ambigram is a special form of text art that can be read as different words or meanings from different angles (usually rotated 180 degrees). It combines artistic design with wordplay, commonly used in tattoo design, artistic creation, and brand identity.',
    category: 'Basic Concepts'
  },
  {
    id: '2',
    question: 'What languages does AmbigramGen support?',
    answer: 'AmbigramGen currently supports multiple languages including English and other character sets. Our intelligent algorithm can handle complex character structures and diverse letter forms, providing high-quality ambigram artworks for users.',
    category: 'Features'
  },
  {
    id: '3',
    question: 'How to create ambigrams with different length words?',
    answer: 'This is AmbigramGen\'s core innovative feature. Simply enter two words of any length in the input boxes, and our algorithm will automatically perform letter mapping, space optimization, and visual balance processing to generate perfect ambigram effects.',
    category: 'How to Use'
  },
  {
    id: '4',
    question: 'Can generated ambigrams be used for commercial purposes?',
    answer: 'Yes, all ambigram artworks generated by AmbigramGen can be used freely for personal and commercial purposes. We don\'t add watermarks or limit usage, giving you complete rights to your creations.',
    category: 'Copyright'
  },
  {
    id: '5',
    question: 'What export formats are supported?',
    answer: 'AmbigramGen supports multiple high-quality export formats, including PNG (suitable for web use), SVG (vector format, infinitely scalable), and PDF (suitable for printing). All formats guarantee high resolution and professional quality.',
    category: 'Export Features'
  },
  {
    id: '6',
    question: 'How to choose the right font?',
    answer: 'We provide various carefully selected fonts, including Gothic, handwritten, modern styles, etc. Choose based on your design needs: Gothic for tattoo designs, handwritten for artistic creation, modern for commercial use.',
    category: 'Design Tips'
  },
  {
    id: '7',
    question: 'Why doesn\'t my ambigram look symmetrical enough?',
    answer: 'The beauty of ambigrams comes from visual balance rather than perfect symmetry. Our algorithm intelligently adjusts based on letter characteristics. If the effect isn\'t ideal, try different fonts or adjust word combinations.',
    category: 'Common Issues'
  },
  {
    id: '8',
    question: 'Can I save my creation history?',
    answer: 'Yes, AmbigramGen automatically saves your creation history. You can view, re-edit, or download previous works in the history panel. History records are saved locally in your browser.',
    category: 'Features'
  },
  {
    id: '9',
    question: 'How to get better tattoo design effects?',
    answer: 'For tattoo designs, choose fonts with clear lines and avoid overly complex decorations. Consider the actual size and body placement of the tattoo, selecting appropriate proportions. Our tattoo optimization feature automatically adjusts line thickness and spacing.',
    category: 'Tattoo Design'
  },
  {
    id: '10',
    question: 'What to do when encountering technical issues?',
    answer: 'If you encounter technical issues, first try refreshing the page or clearing browser cache. If problems persist, please send detailed problem descriptions through our contact page, and we\'ll resolve them as soon as possible.',
    category: 'Technical Support'
  }
];

const categories = ['All', 'Basic Concepts', 'Features', 'How to Use', 'Copyright', 'Export Features', 'Design Tips', 'Common Issues', 'Tattoo Design', 'Technical Support'];

export default function HelpPage() {
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedItems, setExpandedItems] = useState<string[]>([]);

  const filteredFAQs = faqData.filter(item => {
    const categoryMatch = selectedCategory === 'All' || item.category === selectedCategory;
    const searchMatch = searchTerm === '' ||
      item.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.answer.toLowerCase().includes(searchTerm.toLowerCase());
    return categoryMatch && searchMatch;
  });

  const toggleExpanded = (id: string) => {
    setExpandedItems(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  return (
    <div className="bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900">
      <div className="max-w-4xl mx-auto px-4 py-16">
        {/* 页面标题 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-4">
            <span className="bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              Help Center
            </span>
          </h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            Find the answers you need and quickly resolve any issues
          </p>
        </motion.div>

        {/* 搜索框 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="mb-8"
        >
          <div className="relative">
            <input
              type="text"
              placeholder="Search questions..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full bg-white/10 text-white placeholder-gray-400 border border-white/20 
                       rounded-xl px-4 py-3 pl-12 focus:outline-none focus:ring-2 focus:ring-purple-500"
            />
            <svg className="w-5 h-5 text-gray-400 absolute left-4 top-1/2 transform -translate-y-1/2" 
                 fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </motion.div>

        {/* 分类筛选 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className="mb-8"
        >
          <div className="flex flex-wrap gap-2">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                  selectedCategory === category
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                    : 'bg-white/10 text-gray-300 hover:bg-white/20 hover:text-white'
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </motion.div>

        {/* FAQ列表 */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          className="space-y-4"
        >
          {filteredFAQs.map((item, index) => (
            <motion.div
              key={item.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.1 * index }}
              className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 overflow-hidden"
            >
              <button
                onClick={() => toggleExpanded(item.id)}
                className="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-white/5 transition-colors"
              >
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-1">
                    <span className="bg-purple-500/20 text-purple-300 px-2 py-1 rounded-full text-xs">
                      {item.category}
                    </span>
                  </div>
                  <h3 className="text-lg font-semibold text-white">
                    {item.question}
                  </h3>
                </div>
                <svg 
                  className={`w-5 h-5 text-gray-400 transition-transform ${
                    expandedItems.includes(item.id) ? 'rotate-180' : ''
                  }`}
                  fill="none" stroke="currentColor" viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {expandedItems.includes(item.id) && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3 }}
                  className="px-6 pb-4"
                >
                  <div className="border-t border-white/10 pt-4">
                    <p className="text-gray-300 leading-relaxed">
                      {item.answer}
                    </p>
                  </div>
                </motion.div>
              )}
            </motion.div>
          ))}
        </motion.div>

        {/* 联系支持 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
          className="mt-16"
        >
          <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 backdrop-blur-lg 
                        rounded-2xl p-8 border border-purple-500/30 text-center">
            <h2 className="text-2xl font-bold text-white mb-4">Still have questions?</h2>
            <p className="text-gray-300 mb-6">
              If you can't find the answer you're looking for, our support team is here to help.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <a
                href="/contact"
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700
                         hover:to-pink-700 text-white px-6 py-3 rounded-xl font-semibold
                         transition-all duration-300 transform hover:scale-105"
              >
                Contact Us
              </a>
              <a
                href="/feedback"
                className="bg-white/10 hover:bg-white/20 text-white px-6 py-3 rounded-xl
                         font-semibold transition-all duration-300 border border-white/20"
              >
                Submit Feedback
              </a>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}